---
- name: Prepare
  hosts: all
  tags:
    - gsi_ca
  gather_facts: false
  become: yes
  become_user: root
  vars: &common_variables
    SHARED_KEY: .gfarm_shared_key
    GFARM_USER: "{{ ansible_user }}"
    SETUP_TMP: "/home/{{ GFARM_USER }}/gfarm-setup-tmp"
    GSDIR: /etc/grid-security
    CERTDIR: "{{ GSDIR }}/certificates"
    HOSTCERT: "{{ GSDIR }}/hostcert.pem"
    SERVICE: gfsd
    GFSD_CERT: "{{ GSDIR }}/{{ SERVICE }}/{{ SERVICE }}cert.pem"
    DIGEST: sha256
    SIGN_WORKDIR: "{{ SETUP_TMP }}/ca_sign"
  tasks:
    - name: Install rsync
      package:
        name: rsync
        state: present

######################################################################
- name: Install gfarm
  hosts: gfarm
  tags:
    - gfarm
  gather_facts: false
  # TODO rsync and distclean?
  serial: 1  # to build on same /SRC directory ...
  tasks:
    - name: install gfarm
      command: bash /SCRIPT/install-gfarm.sh --no-distclean
      #command: date  #TODO

######################################################################
- name: Setup SASL for servers
  hosts: group_gfmd, group_gfsd
  gather_facts: false
  tasks:
    - name: Run pkg-config
      shell: pkg-config --variable=libdir libsasl2
      register: pkgconfig_out
    - name: Display pkgconfig_out
      debug:
        var: pkgconfig_out
    - name: Create sasl2/gfarm.conf for server
      become: yes
      become_user: root
      copy:
        content: |
          log_level: 7
          mech_list: XOAUTH2 ANONYMOUS
          xoauth2_scope: hpci
          xoauth2_aud: hpci
          xoauth2_user_claim: hpci.id
        dest: "{{ pkgconfig_out.stdout_lines[0] }}/sasl2/gfarm.conf"
    #- name: cat
    #  shell: cat "{{ pkgconfig_out.stdout_lines[0] }}/sasl2/gfarm.conf"

- name: Setup SASL for all hosts
  hosts: gfarm
  gather_facts: false
  tasks:
    - name: Run pkg-config
      shell: pkg-config --variable=libdir libsasl2
      register: pkgconfig_out
    - name: Display pkgconfig_out
      debug:
        var: pkgconfig_out
    - name: Create sasl2/gfarm.conf for client
      become: yes
      become_user: root
      copy:
        content: |
          xoauth2_user_claim: hpci.id
        dest: "{{ pkgconfig_out.stdout_lines[0] }}/sasl2/gfarm-client.conf"
    - name: create empty sasldb2 database
      # because the gdbm backend of Cyrus SAL (e.g. on RHEL9) needs this
      # although the berkeley DB backend does NOT
      become: yes
      become_user: root
      shell: saslpasswd2 -d -u NOT-EXIST NOT-EXIST
    - name: sasldb2 (1)
      # XXX - SASL XOAUTH2 fails in gfsd on ubuntu due to the error
      # "unable to open Berkeley db /etc/sasldb2: Permission denied"
      become: yes
      become_user: root
      shell: chown _gfarmfs /etc/sasldb2
      register: result1
      ignore_errors: yes
    - name: sasldb2 (2)
      become: yes
      become_user: root
      shell: chown _gfarmfs /etc/sasl2/sasldb2
      register: result2
      ignore_errors: yes
    - name: Check sasldb2
      fail:
        msg: "Failed to set permissions on both files of sasldb2"
      when: result1.rc != 0 and result1.rc != 0

######################################################################
- name: Create .gfarm_shared_key for servers
  hosts: gfmd1
  gather_facts: false
  vars: *common_variables
  tasks:
    - name: Create keys for system users
      become: no
      # shell: |
      #   sudo -u {{ item }} gfkey -f -p 31536000
      become_user: "{{ item }}"
      shell: |
        gfkey -f -p 31536000
      loop:
        - _gfarmmd
        - _gfarmfs
        - "{{ GFARM_USER }}"
    - name: Copy key to local
      become: yes
      become_user: root
      fetch:
        src: "/home/{{ item }}/{{ SHARED_KEY }}"
        dest: "{{ SETUP_TMP }}/{{ SHARED_KEY }}-{{ item }}"
        flat: yes
      loop:
        - _gfarmmd
        - _gfarmfs
        - "{{ GFARM_USER }}"

- name: Copy .gfarm_shared_key to servers
  hosts: group_gfmd:group_gfsd:!gfmd1
  gather_facts: false
  vars: *common_variables
  tasks:
    - name: Copy keys
      become: yes
      become_user: root
      copy:
        src: "{{ SETUP_TMP }}/{{ SHARED_KEY }}-{{ item }}"
        dest: "/home/{{ item }}/{{ SHARED_KEY }}"
        owner: "{{ item }}"
        group: "{{ item }}"
        mode: "0600"
      loop:
        - _gfarmmd
        - _gfarmfs
        - "{{ GFARM_USER }}"

- name: Copy .gfarm_shared_key to clients
  hosts: group_gfclient
  gather_facts: false
  vars: *common_variables
  tasks:
    - name: Copy keys
      become: yes
      become_user: root
      copy:
        src: "{{ SETUP_TMP }}/{{ SHARED_KEY }}-{{ item }}"
        dest: "/home/{{ item }}/{{ SHARED_KEY }}"
        owner: "{{ item }}"
        group: "{{ item }}"
        mode: "0600"
      loop:
        - "{{ GFARM_USER }}"

######################################################################
- name: Build CA environment for GSI
  hosts: manage
  gather_facts: false
  vars: *common_variables
  tags: gsi_ca
  tasks:
    - name: Install globus-simple-ca
      become: yes
      become_user: root
      package:
        name: globus-simple-ca
        state: present
    - name: Initialize CA
      shell: bash -x /SCRIPT/setup-globus-simple-ca.sh
      register: ca_result
    - name: set fact
      set_fact:
        gsi_ca_hash: "{{ ca_result.stdout }}"
- name: sync_gsi_certificates
  hosts: gfarm
  gather_facts: true
  vars:
    <<: [*common_variables]
    CA_HASH: "{{ hostvars['manage']['gsi_ca_hash'] }}"
  tags: gsi_ca
  tasks:
    - name: debug
      debug:
        var: gsi_ca_hash
    - name: mkdir
      become: yes
      become_user: root
      file:
        path: "{{ CERTDIR }}"
        state: directory
    - name: sync
      become: yes
      become_user: root
      synchronize:
        src: "{{ CERTDIR }}"
        dest: "{{ CERTDIR }}"
    - name: grid-default-ca
      become: yes
      become_user: root
      shell: grid-default-ca -ca {{ CA_HASH }}

    - name: patch for grid-cert-requiest
      become: yes
      become_user: root
      command: sed -i 's/:\/var\/adm\/wtmp:\/var\/log\/messages//' /usr/bin/grid-cert-request

    - name: Check the existence of hostcert
      become: yes
      become_user: root
      stat:
        path: "{{ HOSTCERT }}"
      register: hostcert_stat

    - name: hostcert request
      become: yes
      become_user: root
      shell: yes | grid-cert-request -host {{ inventory_hostname }}
      when: not hostcert_stat.stat.exists

    - name: Check the existence of gfsdcert
      become: yes
      become_user: root
      stat:
        path: "{{ GFSD_CERT }}"
      register: gfsdcert_stat

    - name: gfsdcert request
      become: yes
      become_user: root
      shell: yes | grid-cert-request -service {{ SERVICE }} -host {{ inventory_hostname }}
      when: not gfsdcert_stat.stat.exists

    - name: Create local SIGN_WORKDIR
      file:
        path: "{{ SIGN_WORKDIR }}/{{ inventory_hostname }}"
        state: directory
      delegate_to: localhost

    - name: fetch hostcert request
      become: yes
      become_user: root
      fetch:
        src: "{{ GSDIR }}/hostcert_request.pem"
        dest: "{{ SIGN_WORKDIR }}/{{ inventory_hostname }}/"
        flat: yes

    - name: fetch gfsdcert request
      become: yes
      become_user: root
      fetch:
        src: "{{ GSDIR }}/{{ SERVICE }}/{{ SERVICE }}cert_request.pem"
        dest: "{{ SIGN_WORKDIR }}/{{ inventory_hostname }}/"
        flat: yes

- name: Sign and copy certificates
  hosts: gfarm
  gather_facts: false
  vars:
    <<: [*common_variables]
    CA_HASH: "{{ hostvars['manage']['gsi_ca_hash'] }}"
  tags: gsi_ca
  serial: 1  # batch size 1 to sign for X.509 serial number
  tasks:
    - name: Sign requests
      become: yes
      become_user: root
      shell: |
        OUT="{{ SIGN_WORKDIR }}/{{ inventory_hostname }}/{{ item }}.pem"
        [ -f $OUT ] || cat /CONF/ca-password.txt | grid-ca-sign -in {{ SIGN_WORKDIR }}/{{ inventory_hostname }}/{{ item }}_request.pem -out $OUT -passin stdin -md {{ DIGEST }}
      loop:
        - hostcert
        - "{{ SERVICE }}cert"
      delegate_to: localhost

    - name: Copy host certificate
      become: yes
      become_user: root
      copy:
        src: "{{ SIGN_WORKDIR }}/{{ inventory_hostname }}/hostcert.pem"
        dest: "{{ GSDIR }}/"

    - name: Copy gfsd certificate
      become: yes
      become_user: root
      copy:
        src: "{{ SIGN_WORKDIR }}/{{ inventory_hostname }}/{{ SERVICE }}cert.pem"
        dest: "{{ GSDIR }}/{{ SERVICE }}/"

    - name: chown gfsd key for _gfarmfs
      become: yes
      become_user: root
      file:
        path: "{{ GSDIR }}/{{ SERVICE }}/"
        recurse: true
        owner: _gfarmfs
        group: _gfarmfs


    - name: DONE
      shell: hostname
