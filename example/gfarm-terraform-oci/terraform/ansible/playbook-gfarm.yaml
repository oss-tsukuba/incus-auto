---
- name: Base for all
  hosts: all
  tags:
    - gsi_ca
  gather_facts: false
  vars: &common_variables
    SHARED_KEY: .gfarm_shared_key
    SYS_USER: "{{ ansible_user }}"
    SYS_HOME: "/home/{{ SYS_USER }}"
    USERS:
      - "{{ SYS_USER }}"
      - testuser1
      - testuser2
    ALL_USERS: "{{ USERS + ['_gfarmmd', '_gfarmfs'] }}"
    SETUP_TMP: "{{ SYS_HOME }}/gfarm-setup-tmp"
    GSDIR: /etc/grid-security
    TLSDIR: /etc/pki/tls
    CERTDIR: "{{ GSDIR }}/certificates"
    HOSTCERT: "{{ GSDIR }}/hostcert.pem"
    SERVICE: gfsd
    GFSD_CERT: "{{ GSDIR }}/{{ SERVICE }}/{{ SERVICE }}cert.pem"
    DIGEST: sha256
    SIGN_WORKDIR: "{{ SETUP_TMP }}/ca_sign"
    CA_DIR: /var/lib/globus/simple_ca
    gfarm_install: yes
    TIME_ZONE: "Asia/Tokyo"
  tasks:
    - name: Set timezone
      community.general.timezone:
        name: "{{ TIME_ZONE }}"
      become: true
    # - name: Install rsync
    #   become: yes
    #   become_user: root
    #   package:
    #     name: rsync
    #     state: present
    - name: mkdir
      become: yes
      become_user: root
      file:
        path: "{{ SETUP_TMP }}"
        state: directory
        mode: "0700"
        owner: "{{ SYS_USER }}"
        group: "{{ SYS_USER }}"
    - name: Add secure_path to sudoers
      become: yes
      become_user: root
      lineinfile:
        path: /etc/sudoers
        regexp: '^Defaults[[:space:]]+secure_path'
        line: 'Defaults    secure_path = /sbin:/bin:/usr/sbin:/usr/bin:/usr/local/bin'
        state: present

- name: Base for Gfarm hosts
  hosts: gfmd gfsd gfclient
  tags:
    - gsi_ca gfarm
  gather_facts: false
  tasks:
    - name: Disable SELinux
      become: yes
      ansible.posix.selinux:
        state: disabled
      #notify: Reboot if SELinux is disabled
      tags: selinux
  # handlers:
  #   - name: Reboot if SELinux is disabled
  #     reboot:
  #     when: ansible_selinux.status == "disabled"

######################################################################
- name: Gfarm environemnt
  hosts: all
  tags: install
  gather_facts: false
  vars:
    <<: [*common_variables]
  tasks:
    - name: Upload source code
      become: yes
      become_user: root
      ansible.posix.synchronize:
        src: "./SRC/"
        dest: "/SRC/"
      when: gfarm_install | bool
    - name: Install gfarm
      command: bash /SRC/install-gfarm.sh --no-distclean
      when: gfarm_install | bool
    - name: Create local users
      become: yes
      become_user: root
      user:
        name: "{{ item }}"
        state: present
        shell: /bin/bash
      loop: "{{ USERS }}"
      when: gfarm_install | bool

######################################################################
- name: Setup SASL for servers
  hosts: gfmd gfsd
  gather_facts: no
  #vars: *common_variables
  tasks:
    - name: Run pkg-config
      shell: pkg-config --variable=libdir libsasl2
      register: pkgconfig_out
    - name: Display pkgconfig_out
      debug:
        var: pkgconfig_out
    - name: Create sasl2/gfarm.conf for server
      become: yes
      become_user: root
      copy:
        content: |
          log_level: 7
          mech_list: XOAUTH2 ANONYMOUS
          xoauth2_scope: hpci
          xoauth2_aud: hpci
          xoauth2_user_claim: hpci.id
        dest: "{{ pkgconfig_out.stdout_lines[0] }}/sasl2/gfarm.conf"
    #- name: cat
    #  shell: cat "{{ pkgconfig_out.stdout_lines[0] }}/sasl2/gfarm.conf"

- name: Setup SASL for all hosts
  hosts: gfmd gfsd gfclient
  gather_facts: no
  tasks:
    - name: Run pkg-config
      shell: pkg-config --variable=libdir libsasl2
      register: pkgconfig_out
    - name: Display pkgconfig_out
      debug:
        var: pkgconfig_out
    - name: Create sasl2/gfarm.conf for client
      become: yes
      become_user: root
      copy:
        content: |
          xoauth2_user_claim: hpci.id
        dest: "{{ pkgconfig_out.stdout_lines[0] }}/sasl2/gfarm-client.conf"
    - name: create empty sasldb2 database
      # because the gdbm backend of Cyrus SASL (e.g. on RHEL9) needs this
      # although the berkeley DB backend does NOT
      become: yes
      become_user: root
      shell: saslpasswd2 -d -u NOT-EXIST NOT-EXIST
    - name: sasldb2
      # XXX - SASL XOAUTH2 fails in gfsd on ubuntu due to the error
      # "unable to open Berkeley db /etc/sasldb2: Permission denied"
      become: yes
      become_user: root
      shell: |
        set -e
        if [ -e /etc/sasldb2 ]; then
          chown _gfarmfs /etc/sasldb2
          exit 0
        elif [ -e /etc/sasl2/sasldb2 ]; then
          chown _gfarmfs /etc/sasl2/sasldb2
          exit 0
        fi
        exit 1

######################################################################
- name: Create .gfarm_shared_key
  hosts: gfmd1
  gather_facts: no
  vars: *common_variables
  tasks:
    - name: Create keys for users
      become: yes
      become_user: root
      shell: sudo -u {{ item }} gfkey -f -p 31536000
      loop: "{{ ALL_USERS }}"
    - name: Copy key to local
      become: yes
      become_user: root
      fetch:
        src: "/home/{{ item }}/{{ SHARED_KEY }}"
        dest: "{{ SETUP_TMP }}/{{ SHARED_KEY }}-{{ item }}"
        flat: yes
      loop: "{{ ALL_USERS }}"

- name: Copy .gfarm_shared_key to servers
  hosts: gfmd:gfsd:!gfmd1
  gather_facts: no
  vars: *common_variables
  tasks:
    - name: Copy keys for servers
      become: yes
      become_user: root
      copy:
        src: "{{ SETUP_TMP }}/{{ SHARED_KEY }}-{{ item }}"
        dest: "/home/{{ item }}/{{ SHARED_KEY }}"
        owner: "{{ item }}"
        group: "{{ item }}"
        mode: "0600"
      loop: "{{ ALL_USERS }}"

- name: Copy .gfarm_shared_key to clients
  hosts: gfclient
  gather_facts: no
  vars: *common_variables
  tasks:
    - name: Copy keys for servers
      become: yes
      become_user: root
      copy:
        src: "{{ SETUP_TMP }}/{{ SHARED_KEY }}-{{ item }}"
        dest: "/home/{{ item }}/{{ SHARED_KEY }}"
        owner: "{{ item }}"
        group: "{{ item }}"
        mode: "0600"
      loop: "{{ USERS }}"

######################################################################
- name: Build CA environment for GSI
  hosts: gfmanage
  gather_facts: no
  vars: *common_variables
  tags: gsi_ca
  tasks:
    - name: Install globus-simple-ca
      become: yes
      become_user: root
      package:
        name: globus-simple-ca
        state: present
    - name: Initialize CA
      shell: bash -x /SRC/setup-globus-simple-ca.sh
      register: ca_result
    - name: set fact
      set_fact:
        gsi_ca_hash: "{{ ca_result.stdout }}"
    - name: debug
      debug:
        var: gsi_ca_hash
    - name: id
      become: yes
      become_user: root
      command: id
    - name: Copy cacert.pem
      become: yes
      become_user: root
      shell: |
        set -e
        DEST="{{ SYS_HOME }}/cacert.pem"
        cp -f "{{ CA_DIR }}/cacert.pem" "$DEST"
        chown "{{ SYS_USER }}:{{ SYS_USER }}" "$DEST"
    - name: patch for grid-ca-sign
      become: yes
      become_user: root
      shell: |
        set -e
        CMD=`which grid-ca-sign`
        CMD_ORIG=${CMD}.orig
        if [ -f $CMD_ORIG ]; then
            cp -f $CMD_ORIG $CMD
        else
            cp -f $CMD $CMD_ORIG
        fi
        sed -i -e '/^\s*req_subj=/{N;d;}' $CMD
        sed -i -e '/^\s*# find signed cert/ i\        req_subj="$(sed -e "s|subject= *|/|" -e "s|,|/|g" < "${subj_tmp_output}")"' $CMD

- name: Install CA
  hosts: gfmd gfsd gfclient
  gather_facts: no
  vars:
    <<: [*common_variables]
    CA_HASH: "{{ hostvars['gfmanage']['gsi_ca_hash'] }}"
  tags: gsi_ca
  tasks:
    - name: debug
      debug:
        var: CA_HASH
    - name: mkdir
      become: yes
      become_user: root
      file:
        path: "{{ CERTDIR }}"
        state: directory
    - name: sync
      become: yes
      become_user: root
      ansible.posix.synchronize:
        src: "{{ CERTDIR }}/"
        dest: "{{ CERTDIR }}/"
    - name: grid-default-ca
      become: yes
      become_user: root
      shell: grid-default-ca -ca {{ CA_HASH }}
    - name: patch for grid-cert-request
      become: yes
      become_user: root
      command: sed -i 's/:\/var\/adm\/wtmp:\/var\/log\/messages//' /usr/bin/grid-cert-request

- name: Request GSI server certificates
  hosts: gfmd gfsd  #TODO jwtserver keycloak
  gather_facts: no
  vars:
    <<: [*common_variables]
    CA_HASH: "{{ hostvars['gfmanage']['gsi_ca_hash'] }}"
  tags: gsi_ca
  tasks:
    - name: Check the existence of hostcert
      become: yes
      become_user: root
      stat:
        path: "{{ HOSTCERT }}"
      register: hostcert_stat

    - name: hostcert request
      become: yes
      become_user: root
      shell: yes | grid-cert-request -host {{ ansible_host }}
      when: not hostcert_stat.stat.exists

    - name: Check the existence of gfsdcert
      become: yes
      become_user: root
      stat:
        path: "{{ GFSD_CERT }}"
      register: gfsdcert_stat

    - name: gfsdcert request
      become: yes
      become_user: root
      shell: yes | grid-cert-request -service {{ SERVICE }} -host {{ ansible_host }}
      when: not gfsdcert_stat.stat.exists

    - name: Create local SIGN_WORKDIR
      file:
        path: "{{ SIGN_WORKDIR }}/{{ ansible_host }}"
        state: directory
      delegate_to: localhost

    - name: fetch hostcert request
      become: yes
      become_user: root
      fetch:
        src: "{{ GSDIR }}/hostcert_request.pem"
        dest: "{{ SIGN_WORKDIR }}/{{ ansible_host }}/"
        flat: yes

    - name: fetch gfsdcert request
      become: yes
      become_user: root
      fetch:
        src: "{{ GSDIR }}/{{ SERVICE }}/{{ SERVICE }}cert_request.pem"
        dest: "{{ SIGN_WORKDIR }}/{{ ansible_host }}/"
        flat: yes

- name: Sign and copy certificates for servers
  hosts: gfmd gfsd
  gather_facts: no
  vars:
    <<: [*common_variables]
  tags: gsi_ca
  serial: 1  # batch size 1 to sign for X.509 serial number
  tasks:
    - name: Sign requests for servers
      become: yes
      become_user: root
      shell: |
        OUT="{{ SIGN_WORKDIR }}/{{ ansible_host }}/{{ item }}.pem"
        [ -f $OUT ] || cat ./ca-password.txt | grid-ca-sign -in {{ SIGN_WORKDIR }}/{{ ansible_host }}/{{ item }}_request.pem -out $OUT -passin stdin -md {{ DIGEST }}
      loop:
        - hostcert
        - "{{ SERVICE }}cert"
      delegate_to: localhost

    - name: Copy host certificate
      become: yes
      become_user: root
      copy:
        src: "{{ SIGN_WORKDIR }}/{{ ansible_host }}/hostcert.pem"
        dest: "{{ GSDIR }}/"

    - name: Copy gfsd certificate
      become: yes
      become_user: root
      copy:
        src: "{{ SIGN_WORKDIR }}/{{ ansible_host }}/{{ SERVICE }}cert.pem"
        dest: "{{ GSDIR }}/{{ SERVICE }}/"

    - name: chown gfsd key for _gfarmfs
      become: yes
      become_user: root
      file:
        path: "{{ GSDIR }}/{{ SERVICE }}/"
        recurse: yes
        owner: _gfarmfs
        group: _gfarmfs

- name: Create GSI clinet certificates
  hosts: gfclient01
  tags: gsi_ca
  gather_facts: no
  vars:
    <<: [*common_variables]
    CA_HASH: "{{ hostvars['gfmanage']['gsi_ca_hash'] }}"
  tasks:
    - name: Request usercert
      become: yes
      become_user: root
      shell: |
        set -e
        u={{ item }}
        CERT=/home/$u/.globus/usercert.pem
        [ -f $CERT ] && exit 0
        REQ=/home/$u/.globus/usercert_request.pem
        rm -f $REQ
        sudo -u {{ item }} grid-cert-request -cn $u -nopw
      loop: "{{ USERS }}"

    - name: fetch usercert requests
      become: yes
      become_user: root
      fetch:
        src: "/home/{{ item }}/.globus/usercert_request.pem"
        dest: "{{ SIGN_WORKDIR }}/usercert_request-{{ item }}.pem.tmp"
        flat: yes
      loop: "{{ USERS }}"

    - name: Sign for users
      become: yes
      become_user: root
      shell: |
        set -e
        IN="{{ SIGN_WORKDIR }}/usercert_request-{{ item }}.pem"
        TMP="${IN}.tmp"
        OUT="{{ SIGN_WORKDIR }}/usercert-{{ item }}.pem"
        cmp -s $IN $TMP && exit 0
        mv -f $TMP $IN
        grid-ca-sign -in $IN -out $OUT -passin pass:$(cat ./ca-password.txt) -md {{ DIGEST }}
      loop: "{{ USERS }}"
      delegate_to: localhost

    - name: Send certificate for users
      become: yes
      become_user: root
      copy:
        src: "{{ SIGN_WORKDIR }}/usercert-{{ item }}.pem"
        dest: "/home/{{ item }}/.globus/usercert.pem"
        owner: "{{ item }}"
        group: "{{ item }}"
        mode: "0600"
      loop: "{{ USERS }}"

    # - name: remove old dot_globus/*
    #   become: yes
    #   become_user: root
    #   file:
    #     path: "{{ SETUP_TMP }}/dot_globus/{{ item.0 }}/{{ item.1 }}"
    #     state: absent
    #   with_nested:
    #     - "{{ USERS }}"
    #     - [ "usercert.pem", "usercert_request.pem", "userkey.pem"]

    - name: Fetch .globus to gfmanage
      become: yes
      become_user: root
      fetch:
        src: "/home/{{ item.0 }}/.globus/{{ item.1 }}"
        dest: "{{ SETUP_TMP }}/dot_globus/{{ item.0 }}/{{ item.1 }}"
        flat: yes
        mode: "0600"
      with_nested:
        - "{{ USERS }}"
        - [ "usercert.pem", "usercert_request.pem", "userkey.pem"]

    - name: chmod -R go-rwx .globus
      become: yes
      become_user: root
      command: chmod -R go-rwx "{{ SETUP_TMP }}/dot_globus/"
      delegate_to: localhost
      run_once: yes

- name: Synchronize .globus
  hosts: gfmd gfsd gfclient
  tags: gsi_ca
  gather_facts: no
  vars:
    <<: [*common_variables]
  tasks:
    - name: synchronize .globus
      become: yes
      become_user: root
      ansible.posix.synchronize:
        src: "{{ SETUP_TMP }}/dot_globus/{{ item }}/"
        dest: "/home/{{ item }}/.globus/"
      loop: "{{ USERS }}"
    - name: chown .globus
      become: yes
      become_user: root
      file:
        dest: "/home/{{ item }}/.globus/"
        recurse: yes
        owner: "{{ item }}"
        group: "{{ item }}"
      loop: "{{ USERS }}"


######################################################################
- name: Setup TLS environment for server
  hosts: gfmd gfsd
  gather_facts: no
  vars:
    <<: [*common_variables]
  tags: tls
  tasks:
    - name: Create TLS directories
      become: yes
      become_user: root
      file:
        path: "{{ TLSDIR }}/{{ item }}"
        state: directory
      loop:
        - certs
        - private

    - name: Symlink for certificates and keys
      become: yes
      become_user: root
      file:
        src: "{{ GSDIR }}/{{ item.0 }}"
        dest: "{{ TLSDIR }}/{{ item.1 }}"
        state: link
      loop:  # [src, dest]
        - ["certificates", "certs/gfarm"]
        - ["hostcert.pem", "private/gfmd.key"]
        - ["gfsd/gfsdcert.pem", "certs/gfsd.crt"]
        - ["gfsd/gfsdkey.pem", "certs/gfsd.key"]

- name: Setup TLS environment for all
  hosts: gfmd gfsd gfclient
  gather_facts: yes  # for ansible_os_family
  vars:
    <<: [*common_variables]
  tags: tls
  tasks:
    - name: Copy cacert.pem to hosts
      copy:
        src: "{{ SYS_HOME }}/cacert.pem"
        dest: "{{ SYS_HOME }}/cacert.pem"
    - name: GSI CA to TLS
      become: yes
      become_user: root
      block:
        - name: update-ca-certificates for Debian family
          shell: |
            set -e
            mkdir -p /usr/share/ca-certificates/gfarm
            cp {{ SYS_HOME }}/cacert.pem /usr/share/ca-certificates/gfarm/
            update-ca-certificates
          # args:
          #   executable: /bin/bash
          when: ansible_os_family == "Debian"
        - name: update-ca-trust for RHEL family
          shell:
            set -e
            cp {{ SYS_HOME }}/cacert.pem /usr/share/pki/ca-trust-source/anchors/
            update-ca-trust
          when: ansible_os_family == "RHEL"
          # args:
          #   executable: /bin/bash

######################################################################
- name: DN of gfarmsys user
  hosts: gfclient01 gfmd1
  gather_facts: no
  vars:
    <<: [*common_variables]
  tags: config
  tasks:
    - name: grid-proxy-init -q
      command: grid-proxy-init -q
    - name: grid-proxy-info -identity
      command: grid-proxy-info -identity
      register: proxyinfo
      changed_when: false

- name: config-gfarm
  hosts: gfmd
  gather_facts: no
  vars: &gfmd_variables
    <<: [*common_variables]
    DN: "{{ hostvars['gfclient01']['proxyinfo']['stdout_lines'][0] }}"
    # TODO -h hostname ?
    CONFIG_OPTION: "-A {{ SYS_USER }} -r -X -d sha1 -a gsi -D {{ DN }} -h {{ ansible_host }}"
    GFMD_CONF: /usr/local/etc/gfmd.conf
    GFARM2_CONF: /usr/local/etc/gfarm2.conf
    GFDUMP_FILE: "{{ SETUP_TMP }}/gfdump_file"
    SUB_GFMD_LIST: "{{ groups['gfmd'] | reject('equalto', 'gfmd1') | map('extract', hostvars, 'ansible_host') | list }}"
    GFMD_FQDN_LIST: "{{ groups['gfmd'] | map('extract', hostvars, 'ansible_host') | list }}"
    GFSD_LIST: "{{ groups['gfsd'] }}"
    #GFSD_FQDN_LIST: "{{ groups['gfsd'] | map('extract', hostvars, 'ansible_host') | list }}"
  tags: config
  tasks:
    - name: config-gfarm
      become: yes
      become_user: root
      shell: |
        set -e
        if [ -f {{ GFMD_CONF }} ]; then
          echo "EXIST"
          exit 0
        fi
        config-gfarm -N {{ CONFIG_OPTION }}
        echo "INIT"
        exit 0
      register: config_gfarm
      changed_when: config_gfarm.stdout == "INIT"
      failed_when: config_gfarm.rc != 0
    - name: update gfmd.conf
      become: yes
      become_user: root
      blockinfile:
        path: "{{ GFMD_CONF }}"
        block: |
          auth enable sharedsecret *
          auth enable gsi_auth *
          auth enable tls_client_certificate *
          auth enable tls_sharedsecret *
          auth enable sasl *
          auth enable sasl_auth *
          auth enable kerberos *
          auth enable kerberos_auth *

    - name: start gfarm-pgsql
      become: yes
      become_user: root
      ansible.builtin.systemd:
        name: gfarm-pgsql
        state: started
        enabled: yes

- name: Setup gfmd1
  hosts: gfmd1
  gather_facts: no
  vars:
    <<: [*gfmd_variables]
  tags: config
  tasks:
    - name: start gfmd
      become: yes
      become_user: root
      ansible.builtin.systemd:
        name: gfmd
        state: started
        enabled: yes

    - name: set METADB_LIST
      set_fact:
        METADB_LIST: "{{ GFMD_FQDN_LIST | map('regex_replace', '(.+)', '\\1:601') | list | join(' ') }}"

    - name: update gfarm2.conf
      become: yes
      become_user: root
      blockinfile:
        path: "{{ GFARM2_CONF }}"
        block: |
          metadb_server_list {{ METADB_LIST }}
          auth enable sharedsecret *
          #auth enable gsi_auth *
          #auth enable tls_client_certificate *
          #auth enable tls_sharedsecret *
          #auth enable sasl *
          #auth enable sasl_auth *
          #auth enable kerberos *
          #auth enable kerberos_auth *
          #auth_trial_order sharedsecret gsi_auth

    - name: backup gfarm2.conf
      fetch:
        src: "{{ GFARM2_CONF }}"
        dest: "{{ SETUP_TMP }}/"
        flat: yes

    - name: main metadata server
      command: gfmdhost -m "{{ ansible_host }}" -C siteA

    - name: sub metadata servers
      shell: |
        set -e
        GFMD={{ item }}
        EXIST=$(gfmdhost -l | awk '{print $6}' | grep ^${GFMD}\$) || true
        case "{{ ansible_host }}" in
          gfmd02.*)
            SITE=siteA
            ;;
          *)
            SITE=siteB
            ;;
        esac
        if [ -n "$EXIST" ]; then
          gfmdhost -m $GFMD -C "$SITE"
        else
          gfmdhost -c $GFMD -C "$SITE"
        fi
      loop: "{{ SUB_GFMD_LIST }}"

    - name: backup DB
      become: yes
      become_user: root
      shell: |
        set -e
        DIR=$(dirname "{{ GFDUMP_FILE }}")
        mkdir -p $DIR
        gfdump.postgresql -d -f "{{ GFDUMP_FILE }}"
        chown -R {{ SYS_USER }} $DIR

    - name: fetch dump_file
      fetch:
        src: "{{ GFDUMP_FILE }}"
        dest: "{{ GFDUMP_FILE }}"
        flat: yes

- name: setup gfmd2...
  hosts: gfmd:!gfmd1
  gather_facts: no
  vars:
    <<: [*gfmd_variables]
  tags: config
  tasks:
    - name: copy gfdump_file
      copy:
        src: "{{ GFDUMP_FILE }}"
        dest: "{{ GFDUMP_FILE }}"
    - name: restore DB
      become: yes
      become_user: root
      command: gfdump.postgresql -r -f "{{ GFDUMP_FILE }}"

- name: Synchronize gfarm2.conf
  hosts: gfmd gfsd gfclient
  gather_facts: yes
  vars:
    <<: [*gfmd_variables]
  tags: config
  tasks:
    - name: Synchronize gfarm2.conf
      become: yes
      become_user: root
      ansible.posix.synchronize:
        src: "{{ SETUP_TMP }}/gfarm2.conf"
        dest: "{{ GFARM2_CONF }}"

- name: config-gfsd
  hosts: gfsd
  gather_facts: no
  vars:
    <<: [*gfmd_variables]
  tags: config
  tasks:
    - name: config-gfsd
      become: yes
      become_user: root
      shell: |
        set -e
        GFSD={{ ansible_host }}
        EXIST=$(sudo -u {{ SYS_USER }} gfhost | grep ^${GFSD}\$) || true
        if [ ! -n "$EXIST" ]; then
          config-gfsd -h $GFSD
          echo "INIT"
        fi
        exit 0
      register: config_gfsd
      changed_when: config_gfsd.stdout == "INIT"
      failed_when: config_gfsd.rc != 0

    - name: fact for gfsd
      set_fact:
        arch: "{{ ansible_architecture }}"

- name: register gfsd
  hosts: gfmd1
  gather_facts: no
  vars:
    <<: [*gfmd_variables]
  tags: config
  tasks:
    - name: gfhost -c
      # TODO config-gfsd -h -l
      shell: |
        set -e
        GFSD={{ hostvars[item]['ansible_host'] }}
        EXIST=$(gfhost -l | awk '{print $5}' | grep ^${GFSD}\$) || true
        ARCH={{ hostvars[item]['arch'] }}
        if [ ! -n "$EXIST" ]; then
          #$(ssh $h gfarm.arch.guess)
          gfhost -c -a $ARCH -p 600 -n $(nproc) $GFSD
          echo "INIT"
        fi
        exit 0
      register: gfhost
      changed_when: gfhost.stdout == "INIT"
      failed_when: gfhost.rc != 0
      loop: "{{ GFSD_LIST }}"

- name: start gfsd
  hosts: gfsd
  gather_facts: no
  vars:
    <<: [*gfmd_variables]
  tags: config
  tasks:
    - name: start gfsd
      become: yes
      become_user: root
      ansible.builtin.systemd:
        name: gfsd
        state: started
        enabled: yes
